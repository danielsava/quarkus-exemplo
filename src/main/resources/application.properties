#
#   ConfigMappings Examples:
#     -  https://quarkus.io/guides/config-mappings
#


### Banner
#   (Java System Property: -Dquarkus.banner.enabled=false; ou Environment Variable: QUARKUS_BANNER_ENABLED)
quarkus.banner.enabled=true
quarkus.banner.path=banner.txt


### Package
# quarkus.package.type=uber-jar


### Portas
#      0 = porta randômica. escolhida pelo SO. Uma mensagem de log no console irá mostrar a porta escolhida.
# quarkus.http.port=0
# quarkus.http.test-port=0


### Disabled HTTP
# quarkus.http.insecure-requests: enabled (default, http works); redirect (redirect for https); disabled (http not works)


### Context Path
# quarkus.http.root-path=<nome_contexto>
# quarkus.servlet.context-path=<para_servlet>


### CORS
# quarkus.http.cors=true
# quarkus.http.cors.origins=http://foo.com,http://www.bar.io,/https://([a-z0-9\\-_]+)\\.app\\.mydomain\\.com/
# quarkus.http.cors.methods=GET,PUT,POST
# quarkus.http.cors.headers=X-Custom
# quarkus.http.cors.exposed-headers=Content-Disposition
# quarkus.http.cors.access-control-max-age=24H
# quarkus.http.cors.access-control-allow-credentials=true


### Quarkus Behind Reverse Proxy : https://quarkus.io/guides/http-reference#reverse-proxy
#      Ativar essas opções somente quando estiver atrás de um proxy-reverso, para não expor vulnerabilidades

# quarkus.http.proxy-address-forwarding=true

# opção 1: cabeçalhos default
# quarkus.http.proxy.allow-forwarded=true

# opção 2: cabeçalhos não padrão
# quarkus.http.proxy.proxy-address-forwarding=true
# quarkus.http.proxy.enable-forwarded-host=true
# quarkus.http.proxy.enable-forwarded-prefix=true


### Config Exemplo
examplo.config.server.host=teste
examplo.config.server.port=1080
examplo.config.server.the-port=1081



### Rest Client
quarkus.rest-client.extension-api.url=https://stage.code.quarkus.io/api
#quarkus.rest-client.extensions-api.scope=javax.inject.Singleton // O valor default é @Dependent. Os possíveis valores são: @Singleton, @Dependent, @ApplicationScoped e @RequestScoped



# SSL config´s
# quarkus.rest-client.extensions-api.hostname-verifier=io.quarkus.restclient.NoopHostnameVerifier // Disabling Hostname Verification
# quarkus.tls.trust-all=true // Disabling SSL verifications



# Log
quarkus.rest-client.logging.scope=all
quarkus.log.category."org.jboss.resteasy.reactive.client.logging".level=DEBUG

# Headers
exemplo.rest.client.header.value=teste-header-file-properties

## Proxy (para RestClient somente)

# Global: global proxy configuration is used for all clients
#quarkus.rest-client.proxy-address=localhost:8182
#quarkus.rest-client.proxy-user=<proxy user name>
#quarkus.rest-client.proxy-password=<proxy password>
#quarkus.rest-client.non-proxy-hosts=example.com

# Cliente Rest: per-client configuration overrides the global settings for a specific client
#quarkus.rest-client.my-client.proxy-address=localhost:8183
#quarkus.rest-client.my-client.proxy-user=<proxy user name>
#quarkus.rest-client.my-client.proxy-password=<proxy password>
#quarkus.rest-client.my-client.url=...



### Database

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=admin
quarkus.datasource.password=123456

#quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/quarkus
quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost/quarkus

# quarkus.hibernate-orm.database.generation: none, create, drop-and-create, drop, update,
quarkus.hibernate-orm.database.generation=update
quarkus.hibernate-orm.log.sql=true
#quarkus.hibernate-orm.sql-load-script=import.sql

# The dialect will be selected based on the Reactive SQL client - unless you set one explicitly
#quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect




#%prod.quarkus.datasource.db-kind=postgresql
#%prod.quarkus.datasource.username=quarkus_test
#%prod.quarkus.datasource.password=quarkus_test
#%prod.quarkus.hibernate-orm.database.generation = none
#%prod.quarkus.hibernate-orm.sql-load-script = no-file
#%prod.quarkus.datasource.reactive.url=vertx-reactive:postgresql://localhost/quarkus_test

#%dev.quarkus.hibernate-orm.database.generation = drop-and-create
#%dev.quarkus.hibernate-orm.sql-load-script = import-dev.sql






### Microsoft Graph

# Tutorial
microsoft.graph.app.tutorial.id=20291cb6-1b55-4a27-ad6d-0c7fd5e49bc9
microsoft.graph.app.tutorial.scopes=User.Read,MailboxSettings.Read,Calendars.ReadWrite

# Ticket
microsoft.graph.app.ticket.tenant=0f68b930-f2f7-4a2e-85b2-afc955274427
microsoft.graph.app.ticket.authority=https://login.microsoftonline.com/0f68b930-f2f7-4a2e-85b2-afc955274427/

# ticket
# microsoft.graph.app.ticket.client=a4e6f2ac-82b4-4259-83a8-cd1b219b6c33
# microsoft.graph.app.ticket.secret=yLh7Q~uVS.VuyJ4ZNEHEXDgF5r6mafyiP2RM~

# Ticket_APP
microsoft.graph.app.ticket.client=2b2c71ff-cea0-4d1d-ada4-5e417c9da5fb
microsoft.graph.app.ticket.secret=x~p7Q~mgPgGG0h.vmt0W3wY3SVlmQS3hYWOz8

microsoft.graph.app.ticket.scopes=https://graph.microsoft.com/.default
# Sobre Scopes: scope=User.Read is equivalent to https://graph.microsoft.com/User.Read.